# -*- coding: utf-8 -*-
"""First_uber.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fstJXUkPzV0GPRCIoTAZVz0efcAOcj4B
"""

import pandas as pd

import numpy as np

import seaborn as sns

import matplotlib.pyplot as plt

df=pd.read_csv("/content/uber.csv")

df.head()

df.columns

df=df.drop(['Unnamed: 0', 'key','pickup_datetime'],axis=1)

df.head()

df.isna()

df.dropna(inplace=True)

for i in df.columns:
    sns.boxplot(data=df[i])
    plt.title(f'Boxplot for {i}')
    plt.show()

print(df[i].unique())

df.columns

sns.boxplot('fare_amount')

x=df.drop('fare_amount',axis=1)

y=df['fare_amount']

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()

scaler.fit_transform(x)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=101)

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(x_train,y_train)
y_pred =lr.predict(x_test)
y_pred[:5]

from sklearn.metrics import mean_squared_error, r2_score
mse = mean_squared_error(y_test, y_pred)

rmse = np.sqrt(mse)

r2 = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE):", mse)
print("Root Mean Squared Error (RMSE):", rmse)
print("R-squared (R²):", r2)

r2 = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE):", mse)
print("Root Mean Squared Error (RMSE):", rmse)
print("R-squared (R²):", r2)

mse = mean_squared_error(y_test, y_pred_rf)
rmse = np.sqrt(mse)

r2 = r2_score(y_test, y_pred_rf)

print("Mean Squared Error (MSE):", mse)
print("Root Mean Squared Error (RMSE):", rmse)
print("R-squared (R²):", r2)

from sklearn.metrics import mean_squared_error, r2_score
mse = mean_squared_error(y_test, y_pred)

rmse = np.sqrt(mse)

r2 = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE):", mse)
print("Root Mean Squared Error (RMSE):", rmse)
print("R-squared (R²):", r2)


from sklearn.ensemble import RandomForestRegressor
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(x_train, y_train)
y_pred_rf = rf_model.predict(x_test)
y_pred_rf[:5]


mse = mean_squared_error(y_test, y_pred_rf)
rmse = np.sqrt(mse)

r2 = r2_score(y_test, y_pred_rf)

print("Mean Squared Error (MSE):", mse)
print("Root Mean Squared Error (RMSE):", rmse)
print("R-squared (R²):", r2)

